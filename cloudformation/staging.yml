AWSTemplateFormatVersion: '2010-09-09'
Description: Deploy PyParse app to ECS with ALB and internet access

Parameters:
  ContainerPort:
    Type: Number
    Description: The port on which your FastAPI app listens
    Default: 8080
  DesiredCount:
    Type: Number
    Description: The number of ECS tasks to run
    Default: 1
  DockerImage:
    Type: String
    Description: ECR image URI for PyParse container

Resources:
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  VpcGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref Vpc
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs [!Ref AWS::Region]]
      MapPublicIpOnLaunch: true

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [1, !GetAZs [!Ref AWS::Region]]
      MapPublicIpOnLaunch: true

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc

  Route:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  SubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref RouteTable

  SubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref RouteTable

  PyParseEcsCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: pyparse-cluster

  PyParseTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: pyparse-task
      NetworkMode: awsvpc
      Cpu: '256'
      Memory: '512'
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Ref PyParseTaskExecutionRole
      ContainerDefinitions:
        - Name: pyparse-container
          Image: !Ref DockerImage 
          Essential: true
          PortMappings:
            - ContainerPort: !Ref ContainerPort
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref PyParseLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: pyparse

  PyParseEcsService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref PyParseEcsCluster
      TaskDefinition: !Ref PyParseTaskDefinition
      DesiredCount: !Ref DesiredCount
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !Ref PublicSubnet1
            - !Ref PublicSubnet2
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref PyParseContainerSecurityGroup
      LoadBalancers:
        - ContainerName: pyparse-container
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref PyParseTargetGroup

  PyParseLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/pyparse-app
      RetentionInDays: 7

  PyParseTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: pyparse-task-execution-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !GetAtt PyParseLogGroup.Arn

  PyParseContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for PyParse app
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref ContainerPort
          ToPort: !Ref ContainerPort
          SourceSecurityGroupId: !Ref PyParseAlbSecurityGroup

  PyParseAlbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ALB
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  PyParseLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref PyParseAlbSecurityGroup

  PyParseTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      VpcId: !Ref Vpc
      HealthCheckPath: /
      HealthCheckPort: !Ref ContainerPort
      TargetType: ip

  PyParseListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref PyParseLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref PyParseTargetGroup

Outputs:
  PyParseAlbDnsName:
    Description: The DNS name of the Application Load Balancer
    Value: !GetAtt PyParseLoadBalancer.DNSName