name: pyparse

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions: write-all

jobs:      
  # build code and run all test
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix: 
        python-version: [3.12]
    steps:
    - uses: actions/checkout@v4

    # Setup Python 
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    # Cache modules
    - name: Cache modules and dependencies
      uses: actions/cache@v4
      with: 
        path: |
          ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt')}}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    # Install dependencies in editable mode
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install -r requirements.txt

    # Install linter 
    - name: Install liner (flake8)
      run: pip install flake8

    # Run linter
    - name: Run linter
      run: flake8 .

    # Run test
    - name: Run test suite
      run: |
        pip install pytest pytest-cov
        pytest --cov-report=xml --cov=./

    # Scan for hardcoded secrets in code
    - name: Secret detection
      uses: gitleaks/gitleaks-action@v1
      env: 
        path: .
        exit-code: 1
        verbose: true

  # build and push docker image to ecr
  staging-build-and-push-image:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [build-and-test]
    steps:
      # Gather AWS Account credentials
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v3
      with: 
        aws-access-key-id: ${{ secrets.QA_AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.QA_AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-2
      # Checkout code from repo
    - name: Checkout repository code
      uses: actions/checkout@v4

      # Login to AWS ECR
    - name: Login to AWS ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      # Build, Tag, and Push the new image to aws ecr
    - name : Build, Tag, and Push Docker Image
      env: 
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: pyparse
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -f dockerFile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
    
  staging-deploy-pyparse:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [staging-build-and-push-image]
    environment: 
     name: staging
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v3
      with:
        aws-access-key-id: ${{ secrets.QA_AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.QA_AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-2

    - name: Checkout repository
      uses: actions/checkout@v4

    # Validate 
    - name: Validate Cloudformation Template
      run: |
        aws cloudformation validate-template --template-body file://cloudformation/staging.yml

    # Deploy 
    - name: Deploy CloudFormation stack / service
      env:
        ECR_REGISTRY: ${{ needs.staging-build-and-push-image.outputs.ecr-registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Get full image URI from previous job
        IMAGE_URI="$ECR_REGISTRY/pyparse:$IMAGE_TAG"
        
        # Deploy/update CloudFormation stack
        aws cloudformation deploy \
            --stack-name pyparse-app \
            --template-file cloudformation/staging.yaml \
            --parameter-overrides \
                DockerImage=$IMAGE_URI \
            --capabilities CAPABILITY_NAMED_IAM